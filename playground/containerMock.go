// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goBoom/builder/definedNode (interfaces: IContainer)

// Package playground is a generated GoMock package.
package playground

import (
	token "go/token"
	reflect "reflect"

	definedNode "github.com/bhbosman/goBoom/builder/definedNode"
	gomock "github.com/golang/mock/gomock"
)

// MockIContainer is a mock of IContainer interface.
type MockIContainer struct {
	ctrl     *gomock.Controller
	recorder *MockIContainerMockRecorder
}

// MockIContainerMockRecorder is the mock recorder for MockIContainer.
type MockIContainerMockRecorder struct {
	mock *MockIContainer
}

// NewMockIContainer creates a new mock instance.
func NewMockIContainer(ctrl *gomock.Controller) *MockIContainer {
	mock := &MockIContainer{ctrl: ctrl}
	mock.recorder = &MockIContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContainer) EXPECT() *MockIContainerMockRecorder {
	return m.recorder
}

// AddFuncDecl mocks base method.
func (m *MockIContainer) AddFuncDecl(arg0 *definedNode.FuncDecl) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFuncDecl", arg0)
}

// AddFuncDecl indicates an expected call of AddFuncDecl.
func (mr *MockIContainerMockRecorder) AddFuncDecl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFuncDecl", reflect.TypeOf((*MockIContainer)(nil).AddFuncDecl), arg0)
}

// AddToScope mocks base method.
func (m *MockIContainer) AddToScope(arg0 definedNode.IScopedItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToScope", arg0)
}

// AddToScope indicates an expected call of AddToScope.
func (mr *MockIContainerMockRecorder) AddToScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToScope", reflect.TypeOf((*MockIContainer)(nil).AddToScope), arg0)
}

// AddTypeSpec mocks base method.
func (m *MockIContainer) AddTypeSpec(arg0 *definedNode.TypeSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTypeSpec", arg0)
}

// AddTypeSpec indicates an expected call of AddTypeSpec.
func (mr *MockIContainerMockRecorder) AddTypeSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTypeSpec", reflect.TypeOf((*MockIContainer)(nil).AddTypeSpec), arg0)
}

// AddValueSpec mocks base method.
func (m *MockIContainer) AddValueSpec(arg0 *definedNode.ValueSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValueSpec", arg0)
}

// AddValueSpec indicates an expected call of AddValueSpec.
func (mr *MockIContainerMockRecorder) AddValueSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValueSpec", reflect.TypeOf((*MockIContainer)(nil).AddValueSpec), arg0)
}

// ValidType mocks base method.
func (m *MockIContainer) ValidType(arg0 definedNode.IDefinedNode) reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidType", arg0)
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ValidType indicates an expected call of ValidType.
func (mr *MockIContainerMockRecorder) ValidType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidType", reflect.TypeOf((*MockIContainer)(nil).ValidType), arg0)
}

// ValidTypeFromKind mocks base method.
func (m *MockIContainer) ValidTypeFromKind(arg0 token.Token) reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTypeFromKind", arg0)
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ValidTypeFromKind indicates an expected call of ValidTypeFromKind.
func (mr *MockIContainerMockRecorder) ValidTypeFromKind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTypeFromKind", reflect.TypeOf((*MockIContainer)(nil).ValidTypeFromKind), arg0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [*definedNode.FuncDecl]
// argString: arg0 *definedNode.FuncDecl
// rets: []
// retString:
// retString:
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnAddFuncDeclDoAndReturn(
	arg0 interface{},
	f func(arg0 *definedNode.FuncDecl)) *gomock.Call {
	return mr.
		AddFuncDecl(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddFuncDeclDo(
	arg0 interface{},
	f func(arg0 *definedNode.FuncDecl)) *gomock.Call {
	return mr.
		AddFuncDecl(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddFuncDeclDoAndReturnDefault(
	f func(arg0 *definedNode.FuncDecl)) *gomock.Call {
	return mr.
		AddFuncDecl(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddFuncDeclDoDefault(
	f func(arg0 *definedNode.FuncDecl)) *gomock.Call {
	return mr.
		AddFuncDecl(gomock.Any()).
		Do(f)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [definedNode.IScopedItem]
// argString: arg0 definedNode.IScopedItem
// rets: []
// retString:
// retString:
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnAddToScopeDoAndReturn(
	arg0 interface{},
	f func(arg0 definedNode.IScopedItem)) *gomock.Call {
	return mr.
		AddToScope(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddToScopeDo(
	arg0 interface{},
	f func(arg0 definedNode.IScopedItem)) *gomock.Call {
	return mr.
		AddToScope(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddToScopeDoAndReturnDefault(
	f func(arg0 definedNode.IScopedItem)) *gomock.Call {
	return mr.
		AddToScope(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddToScopeDoDefault(
	f func(arg0 definedNode.IScopedItem)) *gomock.Call {
	return mr.
		AddToScope(gomock.Any()).
		Do(f)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [*definedNode.TypeSpec]
// argString: arg0 *definedNode.TypeSpec
// rets: []
// retString:
// retString:
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnAddTypeSpecDoAndReturn(
	arg0 interface{},
	f func(arg0 *definedNode.TypeSpec)) *gomock.Call {
	return mr.
		AddTypeSpec(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddTypeSpecDo(
	arg0 interface{},
	f func(arg0 *definedNode.TypeSpec)) *gomock.Call {
	return mr.
		AddTypeSpec(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddTypeSpecDoAndReturnDefault(
	f func(arg0 *definedNode.TypeSpec)) *gomock.Call {
	return mr.
		AddTypeSpec(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddTypeSpecDoDefault(
	f func(arg0 *definedNode.TypeSpec)) *gomock.Call {
	return mr.
		AddTypeSpec(gomock.Any()).
		Do(f)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [*definedNode.ValueSpec]
// argString: arg0 *definedNode.ValueSpec
// rets: []
// retString:
// retString:
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnAddValueSpecDoAndReturn(
	arg0 interface{},
	f func(arg0 *definedNode.ValueSpec)) *gomock.Call {
	return mr.
		AddValueSpec(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddValueSpecDo(
	arg0 interface{},
	f func(arg0 *definedNode.ValueSpec)) *gomock.Call {
	return mr.
		AddValueSpec(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddValueSpecDoAndReturnDefault(
	f func(arg0 *definedNode.ValueSpec)) *gomock.Call {
	return mr.
		AddValueSpec(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnAddValueSpecDoDefault(
	f func(arg0 *definedNode.ValueSpec)) *gomock.Call {
	return mr.
		AddValueSpec(gomock.Any()).
		Do(f)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [definedNode.IDefinedNode]
// argString: arg0 definedNode.IDefinedNode
// rets: [reflect.Type]
// retString: reflect.Type
// retString:  reflect.Type
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnValidTypeDoAndReturn(
	arg0 interface{},
	f func(arg0 definedNode.IDefinedNode) reflect.Type) *gomock.Call {
	return mr.
		ValidType(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeDo(
	arg0 interface{},
	f func(arg0 definedNode.IDefinedNode)) *gomock.Call {
	return mr.
		ValidType(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeDoAndReturnDefault(
	f func(arg0 definedNode.IDefinedNode) reflect.Type) *gomock.Call {
	return mr.
		ValidType(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeDoDefault(
	f func(arg0 definedNode.IDefinedNode)) *gomock.Call {
	return mr.
		ValidType(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 reflect.Type]
// retArgs22: ret0 reflect.Type
// 1
func (mr *MockIContainerMockRecorder) OnValidTypeReturn(
	arg0 interface{},
	ret0 reflect.Type) *gomock.Call {
	return mr.
		ValidType(arg0).
		Return(ret0)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeReturnDefault(
	ret0 reflect.Type) *gomock.Call {
	return mr.
		ValidType(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [token.Token]
// argString: arg0 token.Token
// rets: [reflect.Type]
// retString: reflect.Type
// retString:  reflect.Type
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindDoAndReturn(
	arg0 interface{},
	f func(arg0 token.Token) reflect.Type) *gomock.Call {
	return mr.
		ValidTypeFromKind(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindDo(
	arg0 interface{},
	f func(arg0 token.Token)) *gomock.Call {
	return mr.
		ValidTypeFromKind(arg0).
		Do(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindDoAndReturnDefault(
	f func(arg0 token.Token) reflect.Type) *gomock.Call {
	return mr.
		ValidTypeFromKind(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindDoDefault(
	f func(arg0 token.Token)) *gomock.Call {
	return mr.
		ValidTypeFromKind(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 reflect.Type]
// retArgs22: ret0 reflect.Type
// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindReturn(
	arg0 interface{},
	ret0 reflect.Type) *gomock.Call {
	return mr.
		ValidTypeFromKind(arg0).
		Return(ret0)
}

// 1
func (mr *MockIContainerMockRecorder) OnValidTypeFromKindReturnDefault(
	ret0 reflect.Type) *gomock.Call {
	return mr.
		ValidTypeFromKind(gomock.Any()).
		Return(ret0)
}
